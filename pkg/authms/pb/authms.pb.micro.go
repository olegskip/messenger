// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authms.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthMs service

func NewAuthMsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthMs service

type AuthMsService interface {
	Auth(ctx context.Context, in *Credentials, opts ...client.CallOption) (*LoginResponse, error)
}

type authMsService struct {
	c    client.Client
	name string
}

func NewAuthMsService(name string, c client.Client) AuthMsService {
	return &authMsService{
		c:    c,
		name: name,
	}
}

func (c *authMsService) Auth(ctx context.Context, in *Credentials, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthMs.Auth", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthMs service

type AuthMsHandler interface {
	Auth(context.Context, *Credentials, *LoginResponse) error
}

func RegisterAuthMsHandler(s server.Server, hdlr AuthMsHandler, opts ...server.HandlerOption) error {
	type authMs interface {
		Auth(ctx context.Context, in *Credentials, out *LoginResponse) error
	}
	type AuthMs struct {
		authMs
	}
	h := &authMsHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthMs{h}, opts...))
}

type authMsHandler struct {
	AuthMsHandler
}

func (h *authMsHandler) Auth(ctx context.Context, in *Credentials, out *LoginResponse) error {
	return h.AuthMsHandler.Auth(ctx, in, out)
}
