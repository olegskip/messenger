// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: authms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthMsClient is the client API for AuthMs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthMsClient interface {
	// Generates a new Rt and a Jwt
	GetNewRt(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Tokens, error)
	// After thic call the old Jwt should revoked and a new jwt are generated
	// The call can be used e.g. when the old Jwt will be expired soon
	ExchangeRt(ctx context.Context, in *Rt, opts ...grpc.CallOption) (*Rt, error)
	// Geneterates a Jwt based on the Rt, if Rt is invalid empty jwt is returned
	GetNewJwt(ctx context.Context, in *Rt, opts ...grpc.CallOption) (*Jwt, error)
	Revoke(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*RevokeResponse, error)
	// Get a user based on the jwt
	GetUser(ctx context.Context, in *Jwt, opts ...grpc.CallOption) (*User, error)
}

type authMsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthMsClient(cc grpc.ClientConnInterface) AuthMsClient {
	return &authMsClient{cc}
}

func (c *authMsClient) GetNewRt(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/AuthMs/GetNewRt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) ExchangeRt(ctx context.Context, in *Rt, opts ...grpc.CallOption) (*Rt, error) {
	out := new(Rt)
	err := c.cc.Invoke(ctx, "/AuthMs/ExchangeRt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) GetNewJwt(ctx context.Context, in *Rt, opts ...grpc.CallOption) (*Jwt, error) {
	out := new(Jwt)
	err := c.cc.Invoke(ctx, "/AuthMs/GetNewJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) Revoke(ctx context.Context, in *Tokens, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/AuthMs/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) GetUser(ctx context.Context, in *Jwt, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/AuthMs/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthMsServer is the server API for AuthMs service.
// All implementations must embed UnimplementedAuthMsServer
// for forward compatibility
type AuthMsServer interface {
	// Generates a new Rt and a Jwt
	GetNewRt(context.Context, *Credentials) (*Tokens, error)
	// After thic call the old Jwt should revoked and a new jwt are generated
	// The call can be used e.g. when the old Jwt will be expired soon
	ExchangeRt(context.Context, *Rt) (*Rt, error)
	// Geneterates a Jwt based on the Rt, if Rt is invalid empty jwt is returned
	GetNewJwt(context.Context, *Rt) (*Jwt, error)
	Revoke(context.Context, *Tokens) (*RevokeResponse, error)
	// Get a user based on the jwt
	GetUser(context.Context, *Jwt) (*User, error)
	mustEmbedUnimplementedAuthMsServer()
}

// UnimplementedAuthMsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthMsServer struct {
}

func (UnimplementedAuthMsServer) GetNewRt(context.Context, *Credentials) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewRt not implemented")
}
func (UnimplementedAuthMsServer) ExchangeRt(context.Context, *Rt) (*Rt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRt not implemented")
}
func (UnimplementedAuthMsServer) GetNewJwt(context.Context, *Rt) (*Jwt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewJwt not implemented")
}
func (UnimplementedAuthMsServer) Revoke(context.Context, *Tokens) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedAuthMsServer) GetUser(context.Context, *Jwt) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthMsServer) mustEmbedUnimplementedAuthMsServer() {}

// UnsafeAuthMsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthMsServer will
// result in compilation errors.
type UnsafeAuthMsServer interface {
	mustEmbedUnimplementedAuthMsServer()
}

func RegisterAuthMsServer(s grpc.ServiceRegistrar, srv AuthMsServer) {
	s.RegisterService(&AuthMs_ServiceDesc, srv)
}

func _AuthMs_GetNewRt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).GetNewRt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/GetNewRt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).GetNewRt(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_ExchangeRt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).ExchangeRt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/ExchangeRt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).ExchangeRt(ctx, req.(*Rt))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_GetNewJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).GetNewJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/GetNewJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).GetNewJwt(ctx, req.(*Rt))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).Revoke(ctx, req.(*Tokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jwt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).GetUser(ctx, req.(*Jwt))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthMs_ServiceDesc is the grpc.ServiceDesc for AuthMs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthMs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthMs",
	HandlerType: (*AuthMsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewRt",
			Handler:    _AuthMs_GetNewRt_Handler,
		},
		{
			MethodName: "ExchangeRt",
			Handler:    _AuthMs_ExchangeRt_Handler,
		},
		{
			MethodName: "GetNewJwt",
			Handler:    _AuthMs_GetNewJwt_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _AuthMs_Revoke_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthMs_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authms.proto",
}
