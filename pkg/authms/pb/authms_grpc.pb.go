// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: authms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthMsClient is the client API for AuthMs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthMsClient interface {
	// generates a new RefreshToken and a AccessToken
	GetNewRefreshToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Tokens, error)
	// after thic call the old tokens should revoked and a new pair of tokens are generated
	ExchangeRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Tokens, error)
	// revoke the refreshToken
	// can e.g. after log out
	RevokeRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get the user's information based on the accessToken
	GetUser(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*User, error)
}

type authMsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthMsClient(cc grpc.ClientConnInterface) AuthMsClient {
	return &authMsClient{cc}
}

func (c *authMsClient) GetNewRefreshToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/AuthMs/GetNewRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) ExchangeRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/AuthMs/ExchangeRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) RevokeRefreshToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AuthMs/RevokeRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsClient) GetUser(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/AuthMs/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthMsServer is the server API for AuthMs service.
// All implementations must embed UnimplementedAuthMsServer
// for forward compatibility
type AuthMsServer interface {
	// generates a new RefreshToken and a AccessToken
	GetNewRefreshToken(context.Context, *Credentials) (*Tokens, error)
	// after thic call the old tokens should revoked and a new pair of tokens are generated
	ExchangeRefreshToken(context.Context, *RefreshToken) (*Tokens, error)
	// revoke the refreshToken
	// can e.g. after log out
	RevokeRefreshToken(context.Context, *RefreshToken) (*emptypb.Empty, error)
	// get the user's information based on the accessToken
	GetUser(context.Context, *AccessToken) (*User, error)
	mustEmbedUnimplementedAuthMsServer()
}

// UnimplementedAuthMsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthMsServer struct {
}

func (UnimplementedAuthMsServer) GetNewRefreshToken(context.Context, *Credentials) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewRefreshToken not implemented")
}
func (UnimplementedAuthMsServer) ExchangeRefreshToken(context.Context, *RefreshToken) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRefreshToken not implemented")
}
func (UnimplementedAuthMsServer) RevokeRefreshToken(context.Context, *RefreshToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRefreshToken not implemented")
}
func (UnimplementedAuthMsServer) GetUser(context.Context, *AccessToken) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthMsServer) mustEmbedUnimplementedAuthMsServer() {}

// UnsafeAuthMsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthMsServer will
// result in compilation errors.
type UnsafeAuthMsServer interface {
	mustEmbedUnimplementedAuthMsServer()
}

func RegisterAuthMsServer(s grpc.ServiceRegistrar, srv AuthMsServer) {
	s.RegisterService(&AuthMs_ServiceDesc, srv)
}

func _AuthMs_GetNewRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).GetNewRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/GetNewRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).GetNewRefreshToken(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_ExchangeRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).ExchangeRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/ExchangeRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).ExchangeRefreshToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_RevokeRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).RevokeRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/RevokeRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).RevokeRefreshToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMs_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthMs/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServer).GetUser(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthMs_ServiceDesc is the grpc.ServiceDesc for AuthMs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthMs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthMs",
	HandlerType: (*AuthMsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewRefreshToken",
			Handler:    _AuthMs_GetNewRefreshToken_Handler,
		},
		{
			MethodName: "ExchangeRefreshToken",
			Handler:    _AuthMs_ExchangeRefreshToken_Handler,
		},
		{
			MethodName: "RevokeRefreshToken",
			Handler:    _AuthMs_RevokeRefreshToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthMs_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authms.proto",
}
